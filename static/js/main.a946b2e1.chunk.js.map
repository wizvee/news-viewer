{"version":3,"sources":["components/Categories.js","components/NewsItem.js","components/NewsList.js","components/lib/usePromise.js","pages/NewsPage.js","App.js","serviceWorker.js","index.js"],"names":["categories","name","text","CategoriesBlock","styled","div","Category","NavLink","Categories","map","c","key","activeClassName","exact","to","NewsItemBlock","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","NewsListBlock","NewsList","category","promiseCreator","deps","useState","loading","setLoading","resolved","setResolved","error","setError","useEffect","a","process","usePromise","query","axios","get","response","articles","data","NewsPage","match","params","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a946b2e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst categories = [\r\n  { name: 'all', text: '전체보기' },\r\n  { name: 'business', text: '비즈니스' },\r\n  { name: 'entertainment', text: '엔터테인먼트' },\r\n  { name: 'health', text: '건강' },\r\n  { name: 'science', text: '과학' },\r\n  { name: 'sports', text: '스포츠' },\r\n  { name: 'technology', text: '기술' },\r\n];\r\n\r\nconst CategoriesBlock = styled.div`\r\n  display: flex;\r\n  padding: 1rem;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  @media screen and(max-width: 768px) {\r\n    width: 100%;\r\n    overflow-y: auto;\r\n  }\r\n`;\r\n\r\nconst Category = styled(NavLink)`\r\n  font-size: 1.125rem;\r\n  cursor: pointer;\r\n  white-space: pre;\r\n  text-decoration: none;\r\n  color: inherit;\r\n  padding-bottom: 0.25rem;\r\n\r\n  &:hover {\r\n    color: #495057;\r\n  }\r\n\r\n  &.active {\r\n    font-weight: 600;\r\n    border-bottom: 2px solid #22b8cf;\r\n    color: #22b8cf;\r\n    &:hover {\r\n      color: #3bc9db;\r\n    }\r\n  }\r\n\r\n  & + & {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nconst Categories = () => {\r\n  return (\r\n    <CategoriesBlock>\r\n      {categories.map(c => (\r\n        <Category\r\n          key={c.name}\r\n          activeClassName=\"active\"\r\n          exact={c.name === 'all'}\r\n          to={c.name === 'all' ? '/news-viewer' : `/news-viewer/${c.name}`}\r\n        >\r\n          {c.text}\r\n        </Category>\r\n      ))}\r\n    </CategoriesBlock>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NewsItemBlock = styled.div`\r\n  display: flex;\r\n\r\n  .thumbnail {\r\n    margin-right: 1rem;\r\n    img {\r\n      display: block;\r\n      width: 160px;\r\n      height: 100px;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n\r\n  .contents {\r\n    h2 {\r\n      margin: 0;\r\n      a {\r\n        color: black;\r\n      }\r\n    }\r\n    p {\r\n      margin: 0.5rem 0 0;\r\n      line-height: 1.5;\r\n      white-space: normal;\r\n    }\r\n  }\r\n\r\n  & + & {\r\n    margin-top: 3rem;\r\n  }\r\n`;\r\n\r\nconst NewsItem = ({ article }) => {\r\n  const { title, description, url, urlToImage } = article;\r\n  return (\r\n    <NewsItemBlock>\r\n      {urlToImage && (\r\n        <div className=\"thumbnail\">\r\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img src={urlToImage} alt=\"tumbnail\" />\r\n          </a>\r\n        </div>\r\n      )}\r\n      <div className=\"contents\">\r\n        <h2>\r\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {title}\r\n          </a>\r\n        </h2>\r\n        <p>{description}</p>\r\n      </div>\r\n    </NewsItemBlock>\r\n  );\r\n};\r\n\r\nexport default NewsItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport NewsItem from './NewsItem';\r\nimport axios from 'axios';\r\nimport usePromise from './lib/usePromise';\r\n\r\nconst NewsListBlock = styled.div`\r\n  box-sizing: border-box;\r\n  padding-bottom: 3rem;\r\n  width: 768px;\r\n  margin: 2rem auto 0;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 0 1rem;\r\n  }\r\n`;\r\n\r\nconst NewsList = ({ category }) => {\r\n  const [loading, response, error] = usePromise(() => {\r\n    const query = category === 'all' ? '' : `&category=${category}`;\r\n    return axios.get(\r\n      `https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=0b5ab586c64943d9b24bcada6b65a141`,\r\n    );\r\n  }, [category]);\r\n\r\n  // 대기 중\r\n  if (loading) return <NewsListBlock>대기 중...</NewsListBlock>;\r\n\r\n  // 아직 response값이 설정되지 않았을 때\r\n  if (!response) return null;\r\n\r\n  // 에러가 발생했을 때\r\n  if (error) return <NewsListBlock>에러 발생!</NewsListBlock>;\r\n\r\n  // response 값이 유효할 때\r\n  const { articles } = response.data;\r\n  return (\r\n    <NewsListBlock>\r\n      {articles.map(article => (\r\n        <NewsItem key={article.url} article={article} />\r\n      ))}\r\n    </NewsListBlock>\r\n  );\r\n};\r\n\r\nexport default NewsList;\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default function usePromise(promiseCreator, deps) {\r\n  // 대기 중/완료/실패에 대한 상태 처리\r\n  const [loading, setLoading] = useState(false);\r\n  const [resolved, setResolved] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function process() {\r\n      setLoading(true);\r\n      try {\r\n        const resolved = await promiseCreator();\r\n        setResolved(resolved);\r\n      } catch (e) {\r\n        setError(e);\r\n      }\r\n      setLoading(false);\r\n    }\r\n    process();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n\r\n  return [loading, resolved, error];\r\n}\r\n","import React from 'react';\r\nimport Categories from '../components/Categories';\r\nimport NewsList from '../components/NewsList';\r\n\r\nconst NewsPage = ({ match }) => {\r\n  // 카테고리가 선택되지 않았으면 기본값 all 사용\r\n  const category = match.params.category || 'all';\r\n  return (\r\n    <>\r\n      <Categories />\r\n      <NewsList category={category} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewsPage;\r\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport NewsPage from './pages/NewsPage';\n\nconst App = () => {\n  return <Route path=\"/:category?\" component={NewsPage} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}